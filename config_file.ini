[DEFAULT]
repeat = 5

; sim_time = 0.1
; repeat = 10
; start = 0
; duration = 480
; task_generation = (10)
; task_complexity = 2
; task_deadline = 4
; car_processing_power = 2
; policy = (dql_training, random, earliest_deadline, lowest_complexity, dql)

# ROI LuST
roi_min_x = 6460
roi_min_y = 7190
roi_max_x = 6540
roi_max_y = 7255

# Reinforcement Learning
max_tasks = 10
max_cars = 40
max_speed  = 27
max_complexity = 2
max_deadline = 4
max_processing_power = 2
n_episodes = 500  ; n_episodes = 500
replay_buffer_capacity = 1000   ; memory = 1000
batch_size = 32
learning_rate  = 0.005  ; lr = 0.001
gamma = 0.99    ; gamma = 0.99
epsilon_max = 1.0 ; epsilon_start = 1.0
epsilon_min = 0.1   ; epsilon_end = 0.01
epsilon_decay  = ${n_episodes}  ; epsilon_decay = 500
epsilon_decay_rate = 0.008
target_update_freq = 10 ; target_update_freq = 10
rl_environment =
rl_agent =
explore = True

# TraCI Parameters
traci_step_length = 0.1

# SUMO Parameters
sumo_binary = /usr/bin/sumo
sumo_cfg = ./scenarios/SUMO/street.sumocfg
sumo_step_length = 0.1
start = 0
duration = 13

# Task Scheduling Parameters
task_generation = (10, 20, 30, 40)
task_priority = -1
task_deadline = 4
task_complexity = 2
car_processing_power = 2
policy = (random, earliest_deadline, lowest_complexity) #, highest_priority)

; lambda_exp = 1 # rate_lambda = 1 / mean

lambda_exp = (0.5, 1, 2)

[RL-training]
rl_environment = TaskSchedulingEnv
rl_agent = DQNAgent
policy = DQNPolicy
explore = True

[RL-inference-explore]
rl_environment = TaskSchedulingEnv
rl_agent = DQNAgent
policy = DQNPolicy
explore = True

[RL-inference-no-explore]
rl_environment = TaskSchedulingEnv
rl_agent = DQNAgent
policy = DQNPolicy
explore = False

[Test]
task_generation = 15
task_deadline = 5

[Test-2]
task_generation = 5
task_deadline = 5

[Test-3]
task_generation = 15
task_deadline = randint(2,5)

[Test-4]
task_generation = 15

task_complexity = 1
car_processing_power = 2
task_deadline = randint(2,5)
# Worst case: Max complexity / Min processing power

[Test-5]
task_generation = 15

task_complexity = randint(1,4)
car_processing_power = randint(2,4)
task_deadline = randint(2,5)
# Worst case: Max complexity / Min processing_power

[Test-6]
task_generation = 0

task_complexity = 2
car_processing_power = 2
task_deadline = randint(2,5)

[Stats]
sumo_cfg = ~/git/LuSTScenario/scenario/dua.static.sumocfg
sumo_binary = /usr/bin/sumo-gui
policy = random
task_generation = 0
duration = 86400

; [Simulation3]
; task_deadline = randint(1,5) 

; [Simulation4]
; task_complexity = randint(1,6) 

; [Simulation5]
; car_processing_power = randint(1,3)

; [Simulation6]
; task_priority = randint(0, 3)
; car_processing_power = randint(1,3)

; [Simulation7]
; task_deadline = randint(1,5)
; car_processing_power = randint(1,3)

; [Simulation8]
; task_complexity = randint(1,6)
; car_processing_power = randint(1,3)

; [Simulation9]
; task_complexity = randint(1,6)
; task_deadline = randint(1, 5)

; [Simulation10]
; # task_complexity = ${Simulation1:task_complexity}
; task_complexity = randint(1,6)
; task_deadline = randint(1,5)
; car_processing_power = randint(1,3)